{"version":3,"sources":["reportWebVitals.js","redux/spray_gate.js","redux/data.js","components/SprayGate/index.js","components/App/index.js","redux/roi.js","redux/reducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","sprayGateInitialState","growthStageOptions","rustPresenceOptions","season","undefined","location","variety","growthStageSelection","rustPresenceSelection","SET_RUST_PRESENCE_SELECTION_INDEX","SET_GROWTH_STAGE_SELECTION_INDEX","SET_LOCATION","SET_VARIETY","SET_SEASON","setRustPresenceSelection","value","type","setGrowthStageSelection","setLocation","setVariety","setSeason","selectGrowthStageOptions","s","sprayGate","selectGrowthStageSelection","selectRustPresenceOptions","selectRustPresenceSelection","selectLocation","selectVariety","selectSeason","SET_DATA","SET_ERROR","initialState","loading","errorOccured","selectError","data","error","selectErrorOccured","selectLoading","selectSeasons","Object","keys","selectValidLocations","selectValidVarieties","selectSeasonLocationVarietySusceptible","se","lo","va","d","GeneralSelector","valSelector","optionsSelector","action","dispatch","useDispatch","idx","useSelector","options","includes","length","className","onChange","e","target","map","o","SprayInfo","presence","stage","shouldSpray","sus","why","getShouldSpray","SprayGate","susText","App","DATA_URL","process","useEffect","fetch","json","setData","catch","console","setError","role","JSON","stringify","path","to","roiInitialState","costOfFungicide","costOfLabor","plotSize","priceOfGrain","SET_COST_OF_FUNGICIDE","SET_COST_OF_LABOR","SET_PLOT_SIZE","SET_PRICE_OF_GRAIN","rootReducer","combineReducers","state","roi","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cff7117b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* State */\n//================================================================================\nexport const sprayGateInitialState = {\n    growthStageOptions: [\"Early vegetative\",\n\t\t\t \"Late vegetative-R6\",\n\t\t\t \"Beginning maturity\"],\n    rustPresenceOptions: [\"No rust present\",\n\t\t\t  \"No rust present but spotted within 100km\",\n\t\t\t  \"<10% rust on lower canopy\",\n\t\t\t  \"<10% rust on mid-canopy\",\n\t\t\t  \"rust present on upper canopy\"],\n    season: undefined,\n    location: undefined,\n    variety: undefined,\n    growthStageSelection: 0,\n    rustPresenceSelection: 0,\n};\n/* Actions */\n//================================================================================\nconst SET_RUST_PRESENCE_SELECTION_INDEX = \"sprayGate/setRustPresenceSelection\";\nconst SET_GROWTH_STAGE_SELECTION_INDEX = \"sprayGate/setGrowthStageSelection\";\nconst SET_LOCATION = \"sprayGate/setLocation\";\nconst SET_VARIETY = \"sprayGate/setVariety\";\nconst SET_SEASON = \"sprayGate/setSeason\";\n\nexport function setRustPresenceSelection(value) {\n    return {\n\ttype: SET_RUST_PRESENCE_SELECTION_INDEX,\n\tvalue: value\n    };\n}\nexport function setGrowthStageSelection(value) {\n    return {\n\ttype: SET_GROWTH_STAGE_SELECTION_INDEX,\n\tvalue: value\n    };\n}\nexport function setLocation(value) {\n    return {\n\ttype: SET_LOCATION,\n\tvalue: value\n    };\n}\nexport function setVariety(value) {\n    return {\n\ttype: SET_VARIETY,\n\tvalue: value\n    };\n}\nexport function setSeason(value) {\n    return {\n\ttype: SET_SEASON,\n\tvalue: value\n    };\n}\n/* Selectors */\n//================================================================================\nexport const selectGrowthStageOptions = (s) => s.sprayGate.growthStageOptions;\nexport const selectGrowthStageSelection= (s) => s.sprayGate.growthStageSelection;\n\nexport const selectRustPresenceOptions = (s) => s.sprayGate.rustPresenceOptions;\nexport const selectRustPresenceSelection= (s) => s.sprayGate.rustPresenceSelection;\n\nexport const selectLocation = (s) => s.sprayGate.location;\nexport const selectVariety = (s) => s.sprayGate.variety;\nexport const selectSeason = (s) => s.sprayGate.season;\n\nexport const getShouldSpray = (stage, presence, sus) => {\n    let shouldSpray;\n    let why;\n    if (sus) {\n\tswitch (stage) {\n\tcase sprayGateInitialState.growthStageOptions[0]:\n\t    switch (presence) {\n\t    case sprayGateInitialState.rustPresenceOptions[0]:\n\t\tshouldSpray = false;\n\t\twhy = \"There is no current threat of a rust outbreak\";\n\t\tbreak;\n\t    case sprayGateInitialState.rustPresenceOptions[1]:\n\t\tshouldSpray = false;\n\t\twhy = \"Rust spores are windborne and can travel quickly given conducive conditions. Increase scouting and prepare to spray if rust is identified in your fields\";\n\t\tbreak;\n\t    case sprayGateInitialState.rustPresenceOptions[2]:\n\t    case sprayGateInitialState.rustPresenceOptions[3]:\n\t    case sprayGateInitialState.rustPresenceOptions[4]:\n\t\tshouldSpray = false;\n\t\twhy = \"Before plants reach R1, there is no major threat to yield. If conditions stay conducive and disease progresses consider spraying at late vegetative stage\";\n\t\tbreak;\n\n\t    }\n\t    break;\n\tcase sprayGateInitialState.growthStageOptions[1]:\n\t    switch (presence) {\n\t    case sprayGateInitialState.rustPresenceOptions[0]:\n\t\tshouldSpray = false;\n\t\twhy = \"There is no current threat of a rust outbreak\";\n\t\tbreak;\n\t    case sprayGateInitialState.rustPresenceOptions[1]:\n\t\tshouldSpray = false;\n\t\twhy = \"Rust spores are windborne and can travel quickly given conducive conditions. Increase scouting and prepare to spray if rust is identified in your fields\";\n\t\tbreak;\n\t    case sprayGateInitialState.rustPresenceOptions[2]:\n\t    case sprayGateInitialState.rustPresenceOptions[3]:\n\t\tshouldSpray = true;\n\t\twhy = \"Spraying a fungicide may suppress rust outbreak and significantly increase yields\";\n\t\tbreak;\n\t    case sprayGateInitialState.rustPresenceOptions[4]:\n\t\tshouldSpray = false;\n\t\twhy = \"The infection is too severe and spraying is no longer economically viable\";\n\t\tbreak;\n\n\t    }\n\t    break;\n\tcase sprayGateInitialState.growthStageOptions[0]:\n\t    shouldSpray = false;\n\t    why = \"Spraying nearing or after pods are full will not be an economically viable option since it will not have an impact on yields\";\n\t    break;\n\t}\n\n    } else {\n\tshouldSpray = false;\n\twhy = \"There is no evidence applying fungicides to a resistant cultivar is an economically viable option.\";\n    }\n    return {\n\tshouldSpray, why\n    };\n}\n\n/* Reducer */\n//================================================================================\nexport function sprayGateReducer(state = sprayGateInitialState, action) {\n    switch (action.type) {\n    case SET_RUST_PRESENCE_SELECTION_INDEX:\n\tstate.rustPresenceSelection= action.value;\n\tbreak;\n    case SET_GROWTH_STAGE_SELECTION_INDEX:\n\tstate.growthStageSelection= action.value;\n\tbreak;\n    case SET_LOCATION:\n\tstate.location = action.value;\n\tbreak;\n    case SET_VARIETY:\n\tstate.variety = action.value;\n\tbreak;\n    case SET_SEASON:\n\tstate.season = action.value;\n\tbreak;\n    default:\n\tbreak;\n    }\n    return state;\n}\n","export const SET_DATA = \"data/setData\";\nconst SET_ERROR = \"data/setError\";\n\n/* State */\n//================================================================================\nconst initialState = {\n    loading: true,\n    errorOccured: false,\n};\n/* Actions */\n//================================================================================\nexport function setData(data) {\n    return {\n\ttype: SET_DATA,\n\tvalue: data\n    };\n}\nexport function setError(error) {\n    return {\n\ttype: SET_ERROR,\n\tvalue: error\n    };\n}\n/* Selectors */\n//================================================================================\nexport const selectError = s => s.data.error;\nexport const selectErrorOccured = s => s.data.errorOccured;\nexport const selectLoading = s => s.data.loading;\n\nexport const selectSeasons = s => Object.keys(s.data.data);\n// This may be a bad idea, but I'm gonna try it (I mean referring to external data)\nexport const selectValidLocations = s => {\n    if (!s.sprayGate.season) {\n\treturn [];\n    }\n    return Object.keys(s.data.data[s.sprayGate.season]);\n}\nexport const selectValidVarieties = s => {\n    if (!s.sprayGate.season || !s.sprayGate.location) {\n\treturn [];\n    }\n    return Object.keys(s.data.data[s.sprayGate.season][s.sprayGate.location]);\n};\nexport const selectSeasonLocationVarietySusceptible = (se, lo, va) => s => {\n    const d = s.data.data;\n    if (d[se] && d[se][lo]) {\n\treturn d[se][lo][va] === \"Susceptible\";\n    }\n    return undefined;\n};\n\n/* Reducer */\n//================================================================================\nexport function dataReducer(state=initialState, action) {\n    switch (action.type) {\n    case SET_DATA:\n\tstate.data = action.value;\n\tstate.loading = false;\n\tbreak;\n    case SET_ERROR:\n\tstate.errorOccured = true;\n\tstate.error = action.value;\n\tstate.loading = false;\n\tbreak;\n    default:\n\tbreak;\n    }\n    return state;\n}\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport {\n    setRustPresenceSelection,\n    setGrowthStageSelection,\n    setLocation,\n    setVariety,\n    setSeason,\n    selectRustPresenceOptions,\n    selectGrowthStageOptions,\n    selectRustPresenceSelection,\n    selectGrowthStageSelection,\n    selectSeason,\n    selectLocation,\n    selectVariety,\n    getShouldSpray, \n} from '../../redux/spray_gate';\n\nimport {\n    selectSeasons,\n    selectValidLocations,\n    selectValidVarieties,\n    selectSeasonLocationVarietySusceptible\n} from '../../redux/data';\n\nconst GeneralSelector = ({valSelector, optionsSelector, action}) => {\n    const dispatch = useDispatch();\n\n    const idx = useSelector(valSelector);\n    const options = useSelector(optionsSelector);\n    if ((!idx || !options.includes(idx)) && options.length > 0) {\n\tdispatch(action(options[0]));\n    }\n    return <select className=\"form-select\"\n\t\t   onChange={(e) => dispatch(action(e.target.value))}\n\t\t   value={idx}\n\t   >\n\t       {options.map((o) => <option key={o} value={o}> {o} </option>)}\n\t   </select>;\n}\nconst SprayInfo = () => {\n    const presence = useSelector(selectRustPresenceSelection);\n    const stage = useSelector(selectGrowthStageSelection);\n    const season = useSelector(selectSeason);\n    const location = useSelector(selectLocation);\n    const variety = useSelector(selectVariety);\n\n    const sus = useSelector(selectSeasonLocationVarietySusceptible(season, location, variety));\n\n    const shouldSpray = getShouldSpray(stage, presence, sus);\n    return <> <h1> You should {!shouldSpray.shouldSpray && \"not\"} spray </h1>\n\t   <p> {shouldSpray.why} </p> </>;\n}\nexport const SprayGate = () => {\n    const season = useSelector(selectSeason);\n    const location = useSelector(selectLocation);\n    const variety = useSelector(selectVariety);\n\n    const sus = useSelector(selectSeasonLocationVarietySusceptible(season, location, variety));\n    let susText = sus ? \"Susceptible!\" : \"Not Susceptible!\";\n    return <div>\n\t       <GeneralSelector valSelector={selectGrowthStageSelection}\n\t\t\t\toptionsSelector={selectGrowthStageOptions}\n\t\t\t\taction={setGrowthStageSelection} />\n\t       <GeneralSelector valSelector={selectRustPresenceSelection}\n\t\t\t\toptionsSelector={selectRustPresenceOptions}\n\t\t\t\taction={setRustPresenceSelection} />\n\t       <GeneralSelector valSelector={selectSeason}\n\t\t\t\toptionsSelector={selectSeasons}\n\t\t\t\taction={setSeason} />\n\t       <GeneralSelector valSelector={selectLocation}\n\t\t\t\toptionsSelector={selectValidLocations}\n\t\t\t\taction={setLocation} />\n\t       <GeneralSelector valSelector={selectVariety}\n\t\t\t\toptionsSelector={selectValidVarieties}\n\t\t\t\taction={setVariety} />\n\t       <h1> Your variety is {susText} </h1>\n\t       <SprayInfo />\n\t   </div>;\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport { SprayGate } from '../SprayGate';\n\nimport { setError,\n\t selectErrorOccured,\n\t selectError,\n\t selectLoading,\n\t setData } from '../../redux/data';\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    const errorOccured = useSelector(selectErrorOccured);\n    const error = useSelector(selectError);\n    const loading = useSelector(selectLoading);\n\n    const DATA_URL = `${process.env.PUBLIC_URL}/data.json`;\n    useEffect(() => {\n\tfetch(DATA_URL)\n\t    .then((data) => data.json())\n\t    .then((data) => dispatch(setData(data)))\n\t    .catch((error) => {\n\t\tconsole.error(error);\n\t\tdispatch(setError(error))\n\t    });\n    }, [dispatch, DATA_URL]);\n\n    if (loading) {\n\treturn <div className=\"spinner-border\" role=\"status\">\n\t\t   <span className=\"visually-hidden\">Loading...</span>\n\t       </div>;\n    }\n    if (errorOccured) {\n\treturn <pre> Error: {JSON.stringify(error)} </pre>;\n    }\n\n    return <Router>\n\t       <div className=\"container\">\n\t\t   <Switch>\n\t\t       <Route path=\"/spray-gate\">\n\t\t\t   <SprayGate />\n\t\t\t   <Link to=\"/\"> Welcome </Link>\n\t\t       </Route>\n\t\t       <Route path=\"/\">\n\t\t\t   <h1> Welcome</h1>\n\t\t\t   <Link to=\"/spray-gate\">Spray Gate </Link>\n\t\t       </Route>\n\t\t   </Switch>\n\t       </div>\n\t   </Router>;\n\n}\n\nexport default App;\n","/* State */\n//================================================================================\nexport const roiInitialState = {\n    costOfFungicide: 24.70,\n    costOfLabor: 29.64,\n    plotSize: 5,\n    priceOfGrain: 400,\n};\n/* Actions */\n//================================================================================\nconst SET_COST_OF_FUNGICIDE = \"roi/setCostOfFungicide\";\nconst SET_COST_OF_LABOR = \"roi/setCostOfLabor\";\nconst SET_PLOT_SIZE = \"roi/setPlotSize\";\nconst SET_PRICE_OF_GRAIN = \"roi/setPriceOfGrain\";\n\nexport function setCostOfFungicide(value) {\n    return {\n\ttype: SET_COST_OF_FUNGICIDE,\n\tvalue: value\n    };\n}\nexport function setCostOfLabor(value) {\n    return {\n\ttype: SET_COST_OF_LABOR,\n\tvalue: value\n    };\n}\nexport function setPlotSize(value) {\n    return {\n\ttype: SET_PLOT_SIZE,\n\tvalue: value\n    };\n}\nexport function setPriceOfGrain(value) {\n    return {\n\ttype: SET_PRICE_OF_GRAIN,\n\tvalue: value\n    };\n}\n/* Selectors */\n//================================================================================\nexport const selectCostOfFungicide = (s) => s.roi.costOfFungicide;\nexport const selectCostOfLabor = (s) => s.roi.costOfLabor;\nexport const selectPlotSize = (s) => s.roi.plotSize;\nexport const selectPriceOfGrain = (s) => s.roi.priceOfGrain;\n\n/* Reducer */\n//================================================================================\nexport function roiReducer(state = roiInitialState, action) {\n    switch (action.type) {\n    case SET_COST_OF_LABOR:\n\tstate.costOfLabor = action.value;\n\tbreak;\n    case SET_PLOT_SIZE:\n\tstate.plotSize = action.value;\n\tbreak;\n    case SET_PRICE_OF_GRAIN:\n\tstate.priceOfGrain = action.value;\n\tbreak;\n    case SET_COST_OF_FUNGICIDE:\n\tstate.costOfFungicide = action.value;\n\tbreak;\n    default:\n\tbreak;\n    }\n    return state;\n}\n","import { combineReducers } from 'redux';\n\nimport { sprayGateReducer } from './spray_gate';\nimport { roiReducer } from './roi';\nimport { dataReducer } from './data';\n\nconst rootReducer = combineReducers({\n    sprayGate: sprayGateReducer,\n    roi: roiReducer,\n    data: dataReducer,\n});\n\nexport default rootReducer;\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App'\nimport rootReducer from './redux/reducer';\n\nimport './index.scss';\n\nconst store = createStore(rootReducer,\n\t\t\t  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nrender(\n    <Provider store={store}>\n\t<React.StrictMode>\n\t    <App />\n\t</React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}